{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "31169878-eb3d-4e75-9b5a-01e77128aef3",
   "metadata": {},
   "source": [
    "# OPTIMIZING AGRICULTURAL PRODUCTION USING AI"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db20bae7-5091-4376-9f0c-e24c944ebd94",
   "metadata": {},
   "source": [
    "## INTRODUCTION\n",
    "Agriculture is the backbone of INDIA,mainly Uttar Pradesh, particularly in the western region, where a significant portion of the population is dependent on farming. However, many farmers in this area, including my father, often rely on outdated methods, such as using last year's yields or following others' practices, leading to inconsistent and suboptimal crop production.\n",
    "This project aims to address these challenges by applying machine learning (ML) and artificial intelligence (AI) to optimize agricultural production. \n",
    "By developing a crop yield prediction model, the project seeks to provide farmers with data-driven insights, considering factors like soil fertility, weather patterns, and fertilizer usage, to make more informed decisions and improve their yields. The ultimate goal is to empower farmers to move beyond traditional methods and adopt modern, technology-driven approaches for better productivity and sustainability.\n",
    "### Future Goals\n",
    "The current model is a step toward integrating artificial intelligence (AI) into farming practices to promote optimized production. In the future, I plan to expand this model by incorporating additional optimization techniques to further enhance productivity and sustainability. \n",
    "Furthermore, I aim to create a user-friendly, farmer-friendly application in the future that will help farmers predict the most suitable crop types based on real-time weather conditions, simplifying the adoption of technology in farming practices. Through this initiative, I hope to assist farmers, like my father, in overcoming the limitations of conventional farming and contribute to enhancing agricultural efficiency and sustainability.\n",
    "This project is a foundational step toward transforming traditional agriculture through accessible technology, helping farmers make informed decisions for a more secure and prosperous future."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e61875b-030d-420a-a6f5-5d079d589ef1",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": True
   },
   "source": [
    "## About the data\n",
    "#### Dataset link: \"https://www.kaggle.com/datasets/patelris/crop-yield-prediction-dataset/data?select=yield_df.csv\"\n",
    "The dataset used in this project is the Crop Recommendation Dataset, obtained from Kaggle curated for machine learning applications. \n",
    "It comprises 2200 observations and 8 key features, including soil nutrients and climate conditions that significantly influence crop selection.\n",
    "\n",
    "#### A. Feature Overview\n",
    "\n",
    "| Feature      | Description                                                   |\n",
    "|--------------|---------------------------------------------------------------|\n",
    "| N            | Nitrogen content in soil (kg/ha)                              |\n",
    "| P            | Phosphorus content in soil (kg/ha)                            |\n",
    "| K            | Potassium content in soil (kg/ha)                             |\n",
    "| temperature  | Average temperature in degrees Celsius (Â°C)                  |\n",
    "| humidity     | Relative humidity in percentage (%)                           |\n",
    "| ph           | Acidity or alkalinity of soil, measured as pH                |\n",
    "| rainfall     | Average rainfall in millimeters (mm)                          |\n",
    "| label        | Target variable representing the recommended crop (multi-class) |\n",
    "\n",
    "\n",
    "#### B. Target Classes\n",
    "The target variable consists of 22 crop labels, representing commonly grown crops in India, such as:\n",
    "\n",
    " - rice, maize, chickpea, kidneybeans, pigeonpeas, mothbeans, mungbean,\n",
    "\n",
    " - blackgram, lentil, pomegranate, banana, mango, grapes, watermelon,\n",
    "\n",
    " - muskmelon, apple, orange, papaya, coconut, cotton, jute, and coffee.\n",
    "\n",
    "These labels were encoded into numerical values using 'LabelEncoder' for compatibility with scikit-learn algorithms.\n",
    "\n",
    "#### C. Data Characteristics\n",
    "- Balance: The dataset is fairly balanced across classes, ensuring that no particular crop dominates, which aids in robust training.\n",
    "\n",
    "- Type: All features are numerical (either continuous or ordinal), and no categorical input preprocessing was required.\n",
    "\n",
    "- Missing Values: df.isnull().sum() confirmed zero missing values.\n",
    "\n",
    "- Data Normalization: Random Forest does not require feature scaling, so normalization was skipped.\n",
    "\n",
    "#### D. Correlation Insights\n",
    "Basic exploratory data analysis using df.describe() and visualizations like pairplots or heatmaps (not shown in code) would reveal relationships such as:\n",
    "\n",
    "- Higher potassium and rainfall values favor crops like rice and sugarcane.\n",
    "\n",
    "- Soil pH between 6 and 7 supports a wide variety of crops."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5ab67a6-bf1b-4448-8759-f041459cae06",
   "metadata": {},
   "source": [
    "## 1. Importing Required Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "98464183-90af-48bc-bb98-de3fe7654705",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "044f3137-428e-4f69-9461-b077b90918d2",
   "metadata": {},
   "source": [
    "## 2. Loading and Exploring the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0956adc9-2633-47a0-88f0-7d6ee952e58e",
   "metadata": {
    "scrolled": True
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "      <th>P</th>\n",
       "      <th>K</th>\n",
       "      <th>temperature</th>\n",
       "      <th>humidity</th>\n",
       "      <th>ph</th>\n",
       "      <th>rainfall</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>78</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>20.130175</td>\n",
       "      <td>81.604873</td>\n",
       "      <td>7.628473</td>\n",
       "      <td>262.717340</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    N   P   K  temperature   humidity        ph    rainfall label\n",
       "0  90  42  43    20.879744  82.002744  6.502985  202.935536  rice\n",
       "1  85  58  41    21.770462  80.319644  7.038096  226.655537  rice\n",
       "2  60  55  44    23.004459  82.320763  7.840207  263.964248  rice\n",
       "3  74  35  40    26.491096  80.158363  6.980401  242.864034  rice\n",
       "4  78  42  42    20.130175  81.604873  7.628473  262.717340  rice"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"C:/Users/nabaz/Downloads/Crop_recommendation.csv\")  # Replace with actual filename\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "36826527-7357-44ff-893d-d5e02dd14edc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2200 entries, 0 to 2199\n",
      "Data columns (total 8 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   N            2200 non-null   int64  \n",
      " 1   P            2200 non-null   int64  \n",
      " 2   K            2200 non-null   int64  \n",
      " 3   temperature  2200 non-null   float64\n",
      " 4   humidity     2200 non-null   float64\n",
      " 5   ph           2200 non-null   float64\n",
      " 6   rainfall     2200 non-null   float64\n",
      " 7   label        2200 non-null   object \n",
      "dtypes: float64(4), int64(3), object(1)\n",
      "memory usage: 137.6+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "N              0\n",
       "P              0\n",
       "K              0\n",
       "temperature    0\n",
       "humidity       0\n",
       "ph             0\n",
       "rainfall       0\n",
       "label          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.info()      # Data types, non-null values\n",
    "df.describe()  # Summary stats\n",
    "df.isnull().sum()  # Check for missing values\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fb4ed7a-56c1-4111-9d25-6717b2e6b247",
   "metadata": {},
   "source": [
    "# Methodology"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "370bfab5-7fb3-4c1f-859a-547b24f8d39d",
   "metadata": {},
   "source": [
    "## 3. Data Preprocessing\n",
    "### 3.1 Encoding Labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d19dc5e4-f569-46b3-90c9-4d25558cef0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()\n",
    "df['label'] = le.fit_transform(df['label'])  # Convert to numbers\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94960623-d4a6-46be-910c-0b9630aaee92",
   "metadata": {},
   "source": [
    "### 3.2 Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9cb78b19-6e10-461b-8b3c-9dacec6b850f",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop('label', axis=1)  # Features\n",
    "y = df['label']               # Target label\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b47ba21e-7fb8-40a2-bdde-f6d8b40488e2",
   "metadata": {},
   "source": [
    "## 3.3 Splitting the Dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9f0a21bc-ec2f-4e6f-bb38-0c69ef0a2f2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.2, \n",
    "                                                    random_state=42)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0678afa-dcbd-4f74-8113-186fc79d5693",
   "metadata": {},
   "source": [
    "# Model Selection\n",
    "**Random Forest Classifier** with 100 trees.\n",
    "\n",
    "We chose Random Forest because:\n",
    "- It gives high accuracy for classification problems.\n",
    "- It works well with Non-linear Relationships.\n",
    "- It handles multiple crop classes effectively.\n",
    "- It avoids overfitting better than a single decision tree.\n",
    "- It tells us which features (like nitrogen or rainfall) are most important.\n",
    "- No need for feature scaling.\n",
    "\n",
    "\n",
    "## 4. Training the Random Forest Classifier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "aa014481-dabc-4b13-baee-c10252adb6f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9e127c0-4326-4097-93f2-5727d902601c",
   "metadata": {},
   "source": [
    "## 5. Making Predictions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "19421fe4-9f7a-4840-898d-8f3a265fdf4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5188d35-ff43-440e-818f-a24918c35333",
   "metadata": {},
   "source": [
    "## 6. Evaluating the Model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a42e0252-fc02-4d91-af72-925dba670126",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9931818181818182\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        23\n",
      "           1       1.00      1.00      1.00        21\n",
      "           2       1.00      1.00      1.00        20\n",
      "           3       1.00      1.00      1.00        26\n",
      "           4       1.00      1.00      1.00        27\n",
      "           5       1.00      1.00      1.00        17\n",
      "           6       1.00      1.00      1.00        17\n",
      "           7       1.00      1.00      1.00        14\n",
      "           8       0.92      1.00      0.96        23\n",
      "           9       1.00      1.00      1.00        20\n",
      "          10       0.92      1.00      0.96        11\n",
      "          11       1.00      1.00      1.00        21\n",
      "          12       1.00      1.00      1.00        19\n",
      "          13       1.00      0.96      0.98        24\n",
      "          14       1.00      1.00      1.00        19\n",
      "          15       1.00      1.00      1.00        17\n",
      "          16       1.00      1.00      1.00        14\n",
      "          17       1.00      1.00      1.00        23\n",
      "          18       1.00      1.00      1.00        23\n",
      "          19       1.00      1.00      1.00        23\n",
      "          20       1.00      0.89      0.94        19\n",
      "          21       1.00      1.00      1.00        19\n",
      "\n",
      "    accuracy                           0.99       440\n",
      "   macro avg       0.99      0.99      0.99       440\n",
      "weighted avg       0.99      0.99      0.99       440\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot confusion matrix\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f32e2843-3996-4e0b-9fec-c47eef7d028b",
   "metadata": {},
   "source": [
    "After training the Random Forest model, we evaluated its performance using the test data.\n",
    "- **Accuracy**: The model achieved an overall accuracy of approximately 98%, which means it correctly predicted the crop in most test cases.\n",
    "- **Classification Report**: High precision, recall, and F1-score across all crop categories.\n",
    " This means the model performs equally well across different crops without bias.\n",
    "- **Confusion Matrix**:We used a heatmap to visualize the confusion matrix.\n",
    "   - It showed:\n",
    "      - Most predictions lie along the diagonal (correct predictions).\n",
    "      - Very few misclassifications occurred between similar crops.\n",
    "      - High true positive rate across most classes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "218bf868-c468-4a4f-930d-59681a261a5a",
   "metadata": {},
   "source": [
    "## 7. Feature Importance Analysis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f8b28cdc-f601-4859-a697-8fe1b7d24cbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "feature_importances = model.feature_importances_\n",
    "features = X.columns\n",
    "\n",
    "sns.barplot(x=feature_importances, y=features)\n",
    "plt.title('Feature Importance')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4f8188a-538a-452f-9a78-572818ebec31",
   "metadata": {},
   "source": [
    "The model also provided feature importance values. It showed that:\n",
    "\n",
    "- **Rainfall, humidity, potassium (K)**, and **phosphorus (P)** were the most important features.\n",
    "- These features play a key role in determining the right crop."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49f373ed-0cc6-43c6-923c-7f144a2cb3f2",
   "metadata": {},
   "source": [
    "## 8. LabelEncoder for Deployment\n",
    "To make predictions on new data, we saved both the trained model and the label encoder using joblib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3dfa414c-66bd-4931-8e2b-3707441031c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['label_encoder.pkl']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd\n",
    "\n",
    "# Save model and encoder\n",
    "model = joblib.load(\"C:/Users/nabaz/Downloads/random_forest_crop_model.pkl\")\n",
    "label_encoder = joblib.load(\"C:/Users/nabaz/Downloads/label_encoder.pkl\")\n",
    "\n",
    "joblib.dump(model, 'random_forest_crop_model.pkl')\n",
    "joblib.dump(le, 'label_encoder.pkl')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "490bffd9-d744-4dbb-bb3b-016d721e2c08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted crop: ['rice']\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "import pandas as pd\n",
    "\n",
    "# Load\n",
    "model = joblib.load(\"random_forest_crop_model.pkl\")\n",
    "label_encoder = joblib.load(\"label_encoder.pkl\")\n",
    "\n",
    "# Predict\n",
    "example_input = pd.DataFrame([[90, 42, 43, 20.87, 82.00, 6.5, 202.93]],\n",
    "                             columns=['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall'])\n",
    "\n",
    "predicted_class = model.predict(example_input)\n",
    "print(\"Predicted crop:\", label_encoder.inverse_transform(predicted_class))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c33db7e3-de59-4f6a-bb36-0162a61c213b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "config = json.loads('{\"jp-MarkdownHeadingCollapsed\": true}')  # This works\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "56897a4f-4b77-482a-92f9-e12571800715",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
